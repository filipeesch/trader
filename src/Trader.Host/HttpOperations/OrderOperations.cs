using System;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Trader.Host.Helpers;

namespace Trader.Host.HttpOperations
{
    public class OrderOperations
    {
        private readonly byte[] _apiSecret;
        private readonly string _apiKey;
        private readonly string _apiBaseAddress;

        public OrderOperations()
        {
            _apiBaseAddress = ConfigurationManager.AppSettings["ApiBaseAddress"];
            _apiKey = ConfigurationManager.AppSettings["ApiKey"];
            _apiSecret = Encoding.UTF8.GetBytes(ConfigurationManager.AppSettings["ApiSecret"]);
        }

        public async Task Create(CreateOrderRequest request)
        {
            var http = new HttpClient();

            http.DefaultRequestHeaders.Add("X-MBX-APIKEY", _apiKey);

            var body = request.Serialize();
            body += "&signature=" + CreateSignature(body);

            var response = await http.PostAsync(
                _apiBaseAddress + "/api/v3/order",
                new StringContent(body)
            );

            var result = await response.Content.ReadAsStringAsync();
        }

        private string CreateSignature(string data)
        {
            using (var hmac = new HMACSHA256(_apiSecret))
            {
                var hashValue = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));

                return string.Concat(hashValue.Select(x => x.ToString("x2")));
            }
        }
    }

    public class CreateOrderRequest
    {
        public CreateOrderRequest()
        {
            TimeInForce = "GTC";
        }

        public string Symbol { get; set; }
        public OrderSide Side { get; set; }
        public OrderType Type { get; set; }
        public string TimeInForce { get; set; }
        public decimal Quantity { get; set; }
        public decimal Price { get; set; }
        public string OrderId { get; set; }
        public decimal? StopPrice { get; set; }
        public long? ReceiveWindow { get; set; }
        public DateTime Date { get; set; }

        public string Serialize()
        {
            var result = new StringBuilder(128);

            result.AppendFormat(
                "symbol={0}&side={1}&type={2}&timeInForce={3}&quantity={4}&price={5}&timestamp={6}",
                Symbol.ToUpper(),
                Side == OrderSide.Buy ? "BUY" : "SELL",
                Type == OrderType.Limit ? "LIMIT" : "STOP",
                TimeInForce,
                Quantity.ToString("N8", CultureInfo.InvariantCulture),
                Price.ToString("N8", CultureInfo.InvariantCulture),
                DateHelpers.ToBinanceDate(Date)
            );

            if (!string.IsNullOrEmpty(OrderId))
                result.Append("&newClientOrderId=").Append(OrderId);

            if (StopPrice.HasValue)
                result.Append("&stopPrice=").Append(StopPrice.Value.ToString("N2", CultureInfo.InvariantCulture));

            if (ReceiveWindow.HasValue)
                result.Append("&recvWindow=").Append(ReceiveWindow.Value);

            return result.ToString();
        }
    }

    public enum OrderSide
    {
        Buy, Sell
    }

    public enum OrderType
    {
        Limit, Stop
    }


    //Name Type    Mandatory Description
    //symbol STRING  YES
    //side    ENUM YES
    //type ENUM    YES
    //timeInForce ENUM YES
    //quantity DECIMAL YES
    //price   DECIMAL YES
    //newClientOrderId STRING  NO A unique id for the order.Automatically generated by default.
    //stopPrice DECIMAL NO Used with STOP orders
    //icebergQty  DECIMAL NO  Used with icebergOrders
    //recvWindow  LONG NO
    //timestamp LONG    YES


    //symbol LTCBTC
    //side BUY
    //type LIMIT
    //timeInForce GTC
    //quantity	1
    //price	0.1
    //recvWindow	6000000
    //timestamp	1499827319559
}
